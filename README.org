#+TITLE:  Tutorial on publishing 5-star open data
#+AUTHOR: Christoph Lange
#+EMAIL:  math.semantic.web@gmail.com
#+DATE:   <2014-08-21 Thu>
#+LANGUAGE:  en
#+STARTUP:   hidestars
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline buttons:t path:org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE: <style type="text/css"> .timestamp { color: purple; font-weight: bold; } </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="bootstrap.min.css" />

*Work in Progress – expect more to be here by <2014-08-25 Mon>*

Practical examples of how to create and publish [[http://5stardata.info][5-star open data]] on the Web; originally written for the [[http://www.emse.fr/~zimmermann/WI_2014_Site/][2014 Web Intelligence Summer School “Web of Data”]].

Published online at http://clange.github.io/5stardata-tutorial/

* Use case: event schedule and presenters of a summer school
  Original data (HTML): [[http://www.emse.fr/~zimmermann/WI_2014_Site/Programme/][schedule]], [[http://www.emse.fr/~zimmermann/WI_2014_Site/Committee/][presenters]]

* ★ PDF
  [[http://5stardata.info/#addendum1][Cost and benefits of ★ Web data]]

  [[file:1star_PDF/schedule.pdf][schedule.pdf]]
* ★★ Excel (*.xls)
  [[http://5stardata.info/#addendum2][Cost and benefits of ★★ Web data]]
  
  [[file:2star_Excel/schedule.xls][schedule.xls]]

  It is not impossible to read this file outside of Excel:
#+NAME: code-process-xls
#+BEGIN_SRC sh :results output replace :exports both
perl -MSpreadsheet::ParseExcel -le '
  print Spreadsheet::ParseExcel->new()
    ->parse("2star_Excel/schedule.xls")
    ->worksheet("Schedule")
    ->get_cell(1,0)
    ->value();'
#+END_SRC
  
  Output:
#+RESULTS: code-process-xls
: 25 Aug 2014 09:00

  It is harder, but not impossible, to have questions answered such as “when is the first coffee break”.

  Think of an algorithm that does the following:
  1. In the column titled “Event”, identify all cells whose value is “Coffee break”.
  2. On each row of such a cell, get the entry of the cell in the “Time” column.
  3. Sort these cells and return the smallest value.

  However, free software libraries do not support all features of this file format.  Here is what happens when we ask a popular free tool to determine the type of this file:
#+NAME: code-file-xls
#+BEGIN_SRC sh :results output replace :exports both
file 2star_Excel/schedule.xls
#+END_SRC

  Output:
#+RESULTS: code-file-xls
: 2star_Excel/schedule.xls: Composite Document File V2 Document, corrupt: Can't read SSAT

* ★★★ OpenDocument (*.ods)
  [[http://5stardata.info/#addendum3][Cost and benefits of ★★★ Web data]]

  [[file:1star_PDF/schedule.pdf][schedule.ods]]

  Shell command:
#+NAME: code-unzip-ods
#+BEGIN_SRC sh :results output replace :exports both
unzip -l 3star_OpenDocument/schedule.ods
#+END_SRC

#+RESULTS: code-unzip-ods
#+begin_example
Archive:  3star_OpenDocument/schedule.ods
  Length      Date    Time    Name
---------  ---------- -----   ----
       46  08-21-2014 08:13   mimetype
    52832  08-21-2014 08:13   Thumbnails/thumbnail.png
    27279  08-21-2014 08:13   styles.xml
    15227  08-21-2014 08:13   content.xml
      852  08-21-2014 08:13   meta.xml
     8774  08-21-2014 08:13   settings.xml
      899  08-21-2014 08:13   manifest.rdf
        0  08-21-2014 08:13   Configurations2/accelerator/current.xml
        0  08-21-2014 08:13   Configurations2/progressbar/
        0  08-21-2014 08:13   Configurations2/statusbar/
        0  08-21-2014 08:13   Configurations2/images/Bitmaps/
        0  08-21-2014 08:13   Configurations2/floater/
        0  08-21-2014 08:13   Configurations2/toolbar/
        0  08-21-2014 08:13   Configurations2/popupmenu/
        0  08-21-2014 08:13   Configurations2/toolpanel/
        0  08-21-2014 08:13   Configurations2/menubar/
     1093  08-21-2014 08:13   META-INF/manifest.xml
---------                     -------
   107002                     17 files
#+end_example
* ★★★☆ CSV
  We need one CSV file per sheet:
  * [[file+emacs:3.5star_CSV/schedule.csv][schedule.csv]]
  * [[file+emacs:3.5star_CSV/presenters.csv][presenters.csv]]
  
* ★★★★ CSV for the Web
  [[http://5stardata.info/#addendum4][Cost and benefits of ★★★★ Web data]]

  From here onwards, [[http://5stardata.info/][the original 5-star open data examples]] use RDF.  We will continue with CSV for a while, to point out that open data on the Web is not /only/ RDF.

  The following examples roughly conform to [[http://jenit.github.io/linked-csv/][Linked CSV]], one of the candidates for an RDF-conforming specification of CSV, as discussed by the [[http://www.w3.org/2013/csvw/][CSV on the Web Working Group]].

  * [[file+emacs:4star_CSV/schedule.csv][schedule.csv]]
  * [[file+emacs:4star_CSV/presenters.csv][presenters.csv]]

** Links using Web-scale identifiers
   An example from the 3-star CSV:
#+NAME: code-csv-id-before
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 1 3.5star_CSV/schedule.csv ;
echo ... ;
fgrep "Markus Krötzsch" 3.5star_CSV/schedule.csv ;
echo ;
head -n 1 3.5star_CSV/presenters.csv ;
echo ... ;
fgrep "Markus Krötzsch" 3.5star_CSV/presenters.csv ;
#+END_SRC
#+RESULTS: code-csv-id-before
: Time,Event,Type,Presenter,Location
: ...
: 27 Aug 2014 09:00,Wikidata,Keynote,Markus Krötzsch,
: 27 Aug 2014 10:15,Working with Wikidata: A Hands-on Guide for Researchers and Developers,Tutorial,Markus Krötzsch,
: 
: Name,Affiliation,Town,Country
: ...
: Markus Krötzsch,TU Dresden,Dresden,Germany

  * How do we know it's twice the same instructor?
  * How can we make this connection Web-safe?  (There might be others by the same name; how about [[https://www.facebook.com/markus.krotzsch][this person on Facebook]]?)
  
  Give the presenter a unique identifier!
#+NAME: code-csv-id-after
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 1 4star_CSV/schedule.csv ;
echo ... ;
fgrep "#markus" 4star_CSV/schedule.csv ;
echo ;
head -n 1 4star_CSV/presenters.csv ;
echo ... ;
fgrep "#markus" 4star_CSV/presenters.csv ;
#+END_SRC
#+RESULTS: code-csv-id-after
: Time,Event,Type,Presenter,Location
: ...
: 2014-08-27T09:00:00+02:00,Wikidata,Keynote,http://purl.org/wiss2014/presenters/#markus,
: 2014-08-27T10:15:00+02:00,Working with Wikidata: A Hands-on Guide for Researchers and Developers,Tutorial,http://purl.org/wiss2014/presenters/#markus,
: 
: $id,Name,Affiliation,Town,Country
: ...
: http://purl.org/wiss2014/presenters/#markus,Markus Krötzsch,TU Dresden,Dresden,Germany

   (The timestamp format has also changed; we'll discuss this [[id:2e724ba4-6b8b-4bbc-bdf8-60f07e223620][next]].)

   It is good practice to …
   * use HTTP URLs for such URIs,
   * choose them from a namespace that /you/ own,
   * publish a machine-comprehensible, self-describing description of the things identified by these URIs at that same URL,
   * so that any client who wants to know something about these things can easily look it up!
   This approach is called *linked data*.
** Datatypes
   :PROPERTIES:
   :ID:       2e724ba4-6b8b-4bbc-bdf8-60f07e223620
   :END:
   With an alternative export configuration, the 3-star CSV may have ended up [[file+emacs:3.5star_CSV/schedule-alt.csv][like this]]:

#+NAME: code-csv-datatype-before
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 3 3.5star_CSV/schedule-alt.csv ;
#+END_SRC
#+RESULTS: code-csv-datatype-before
: Time,Event,Type,Presenter,Location
: 08/25/2014 09:00:00,Introduction,,,
: 08/25/2014 09:15:00,Keynote,Keynote,Stefan Decker,

   =08/25/2014= is sufficiently unambiguous, but what does =01/02/03= mean?

   * 1 February 2003?
   * 2 January 2003?
   * 3 February 2001?
   * …?
   
   If we don't know how to interpret date entries, we can't answer queries such as “when is the first coffee break”.

   Also, if your family from a different timezone wanted to phone you in the lunch break, how do we know that =09:00:00= is in CEST?

   So let's use an ISO 8601 conforming date and time format, with time zone information:
#+NAME: code-csv-datatype-after
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 3 4star_CSV/schedule.csv
#+END_SRC
#+RESULTS: code-csv-datatype-after
: Time,Event,Type,Presenter,Location
: 2014-08-25T09:00:00+02:00,Introduction,,,
: 2014-08-25T09:15:00+02:00,Keynote,Keynote,http://purl.org/wiss2014/presenters/#stefan,

* ★★★★☆ CSV with a schema
  Let's continue to make our CSV even more self-describing, by introducing a /schema/ (also called /vocabulary/ on the Web of Data).

  * [[file+emacs:4.5star_CSV/schedule.csv][schedule.csv]]
  * [[file+emacs:4.5star_CSV/presenters.csv][presenters.csv]]
** A vocabulary of domain-specific concepts
   We introduced linked data style URIs for the presenters (so that they describe themselves); let's also do it for other concepts, e.g. the types of presentations.

   Let's introduce a domain-specific /vocabulary/.

   Instead of a string "=Keynote=" let's use a self-describing URI:
#+NAME: code-csv-vocab-ref
#+BEGIN_SRC sh :results output verbatim replace :exports results
fgrep 'vocab/#Keynote' 4.5star_CSV/schedule.csv | head -n 1
#+END_SRC
#+RESULTS: code-csv-vocab-ref
: ,2014-08-25T09:15:00+02:00,Keynote,http://purl.org/wiss2014/vocab/#Keynote,http://purl.org/wiss2014/presenters/#stefan,

   And let's create another CSV file for the vocabulary, where we define our terms:
#+NAME: code-csv-vocab-def
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 1 4.5star_CSV/vocab.csv ;
fgrep '#Keynote' 4.5star_CSV/vocab.csv | head -n 1
#+END_SRC
#+RESULTS: code-csv-vocab-def
: $id,label,description,see also
: #Keynote,keynote,a talk that establishes a theme,http://en.wikipedia.org/wiki/Keynote

   The relative URI =#Keynote= works out if this file is published at http://purl.org/wiss2014/vocab/.

** An explicit description of types
   We introduced ISO 8601 timestamps, but how does a client /know/ that the first column of =schedule.csv= is an ISO 8601 timestamp?
#+NAME: code-csv-datatype-implicit
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 2 4star_CSV/schedule.csv
#+END_SRC
#+RESULTS: code-csv-datatype-implicit
: Time,Event,Type,Presenter,Location
: 2014-08-25T09:00:00+02:00,Introduction,,,
   
   We also introduced a vocabulary, but how do we make explicit what we mean by “label”, “description” and “see also”?

   Let's explicitly indicate the types!

   For the timestamps and other entries in the schedule:
#+NAME: code-csv-datatype-explicit
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 3 4.5star_CSV/schedule.csv
#+END_SRC
#+RESULTS: code-csv-datatype-explicit
: #,Time,Event,Type,Presenter,Location
: type,time,string,url,url,string
: ,2014-08-25T09:00:00+02:00,Introduction,,,

   (We'll get to the structure of the new, first column later.)

   For the properties of vocabulary terms:
#+NAME: code-csv-vocab-properties
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 3 4.5star_CSV/vocab.csv
#+END_SRC
#+RESULTS: code-csv-vocab-properties
: $id,label,description,see also
: url,rdfs:label,rdfs:comment,owl:seeAlso
: #Keynote,keynote,a talk that establishes a theme,http://en.wikipedia.org/wiki/Keynote

   =rdfs:= and =owl:= are well-known prefixes that abbreviate URIs.  =rdfs:label= (actually: http://www.w3.org/2000/01/rdf-schema#label) once more is a vocabulary term, in a widely used standard vocabulary.  Its =rdfs:comment= is “A human-readable name for the subject.”.
** Distinguishing data and metadata
   When a CSV has a type declaration rows such as =url,rdfs:label,rdfs:comment,owl:seeAlso=, how do we know that this is metadata rather than data?

   Let's make it explicit!

#+NAME: code-csv-datatype-explicit
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 3 4.5star_CSV/schedule.csv
#+END_SRC
#+RESULTS: code-csv-datatype-explicit
: #,Time,Event,Type,Presenter,Location
: ,2014-08-25T09:00:00+02:00,Introduction,,,

   * When the first column has a =type= entry, we are in the type declaration row.
   * An empty first column means “data”.
** More precise types for data columns
   * Is the title of an event really just a string?
   * Is the presenter really just a URI (that happens to point to a presenter)?
   
   No! – Let's also reuse some standard vocabularies here!

   * [[file+emacs:4.5star_CSV/schedule-more.csv][schedule-more.csv]]
   * [[file+emacs:4.5star_CSV/presenters-more.csv][presenters-more.csv]]
     
   Schedule:
#+NAME: code-csv-type-vocab-schedule
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 2 4.5star_CSV/schedule-more.csv ;
fgrep 'vocab/#Keynote' 4.5star_CSV/schedule-more.csv | head -n 1
#+END_SRC
#+RESULTS: code-csv-type-vocab-schedule
: #,Time,Event,Type,Presenter,Location
: type,dct:time,dct:title,rdf:type,http://id.loc.gov/vocabulary/relators/pre,http://linkedevents.org/ontology/atPlace
: ,2014-08-25T09:15:00+02:00,Keynote,http://purl.org/wiss2014/vocab/#Keynote,http://purl.org/wiss2014/presenters/#stefan,

   Presenters:
#+NAME: code-csv-type-vocab-presenters
#+BEGIN_SRC sh :results output verbatim replace :exports results
head -n 3 4.5star_CSV/presenters-more.csv
#+END_SRC
#+RESULTS: code-csv-type-vocab-presenters
: #,$id,Name,Affiliation,Town,Country
: type,url,foaf:name,schema:affiliation,http://purl.org/wiss2014/vocab/#town,http://purl.org/wiss2014/vocab/#country
: ,http://purl.org/wiss2014/presenters/#soeren,Sören Auer,Universität Bonn;Fraunhofer IAIS,Bonn,Germany

   * We found a lot of reusable terms in standard vocabularies.
   * [[http://lov.okfn.org][Linked Open Vocabularies (LOV)]] helps with that.
   * Where didn't find perfectly reusable terms, we defined our own, in /our/ vocabulary.
* ★★★★★ RDF (and a comparison to CSV)
  [[http://5stardata.info/#addendum5][Cost and benefits of ★★★★★ Web data]]

  More widely than CSV, the /RDF/ data model is used for linked data.

  Whenever a URI conforms to linked data, you can expect RDF there (usually in the ugly but widely supported RDF/XML encoding).
  
  Let's therefore redo our example in RDF, and discuss some differences from CSV.
* ★★★★★☆ Further possible improvements: standard schemas, quality, …

* Credits
  This tutorial is based on an idea by [[http://www.emse.fr/~zimmermann/][Antoine Zimmermann]].  The motivation was to prepare something for the [[http://www.emse.fr/~zimmermann/WI_2014_Site/][2014 Web Intelligence Summer School “Web of Data”]] that's not too heavily biased towards RDF.

* License
  [[https://i.creativecommons.org/l/by-sa/4.0/88x31.png]]\\
  This work is licensed under a [[http://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International License]].
